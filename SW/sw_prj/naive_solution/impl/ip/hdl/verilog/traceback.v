// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module traceback (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        seq1_address0,
        seq1_ce0,
        seq1_q0,
        seq2_address0,
        seq2_ce0,
        seq2_q0,
        H_address0,
        H_ce0,
        H_q0,
        H_address1,
        H_ce1,
        H_q1,
        pos_0_read,
        pos_1_read,
        aligned_seq1_address0,
        aligned_seq1_ce0,
        aligned_seq1_we0,
        aligned_seq1_d0,
        aligned_seq1_q0,
        aligned_seq2_address0,
        aligned_seq2_ce0,
        aligned_seq2_we0,
        aligned_seq2_d0,
        aligned_seq2_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] seq1_address0;
output   seq1_ce0;
input  [7:0] seq1_q0;
output  [6:0] seq2_address0;
output   seq2_ce0;
input  [7:0] seq2_q0;
output  [13:0] H_address0;
output   H_ce0;
input  [31:0] H_q0;
output  [13:0] H_address1;
output   H_ce1;
input  [31:0] H_q1;
input  [31:0] pos_0_read;
input  [31:0] pos_1_read;
output  [6:0] aligned_seq1_address0;
output   aligned_seq1_ce0;
output   aligned_seq1_we0;
output  [7:0] aligned_seq1_d0;
input  [7:0] aligned_seq1_q0;
output  [6:0] aligned_seq2_address0;
output   aligned_seq2_ce0;
output   aligned_seq2_we0;
output  [7:0] aligned_seq2_d0;
input  [7:0] aligned_seq2_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg seq1_ce0;
reg seq2_ce0;
reg[13:0] H_address0;
reg H_ce0;
reg H_ce1;
reg[6:0] aligned_seq1_address0;
reg aligned_seq1_ce0;
reg aligned_seq1_we0;
reg[7:0] aligned_seq1_d0;
reg[6:0] aligned_seq2_address0;
reg aligned_seq2_ce0;
reg aligned_seq2_we0;
reg[7:0] aligned_seq2_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] j_0_load_reg_627;
wire    ap_CS_fsm_state2;
reg   [31:0] i_0_load_reg_632;
wire   [0:0] and_ln127_fu_355_p2;
reg   [0:0] and_ln127_reg_637;
wire   [31:0] add_ln146_fu_361_p2;
reg   [31:0] add_ln146_reg_641;
wire   [14:0] trunc_ln130_fu_367_p1;
reg   [14:0] trunc_ln130_reg_646;
wire  signed [14:0] mul_ln130_fu_598_p2;
reg  signed [14:0] mul_ln130_reg_651;
reg   [31:0] H_load_reg_661;
wire    ap_CS_fsm_state3;
wire   [31:0] j_1_fu_391_p2;
reg   [31:0] j_1_reg_671;
wire   [0:0] icmp_ln130_fu_385_p2;
(* use_dsp48 = "no" *) wire   [14:0] add_ln140_fu_405_p2;
reg   [14:0] add_ln140_reg_676;
wire   [31:0] i_fu_410_p2;
reg   [31:0] i_reg_681;
(* use_dsp48 = "no" *) wire   [14:0] add_ln141_fu_434_p2;
reg   [14:0] add_ln141_reg_691;
wire    ap_CS_fsm_state4;
reg   [7:0] seq1_load_reg_716;
reg   [7:0] seq2_load_reg_721;
wire   [0:0] and_ln142_fu_477_p2;
reg   [0:0] and_ln142_reg_726;
wire  signed [31:0] j_fu_542_p2;
reg  signed [31:0] j_reg_736;
wire    ap_CS_fsm_state6;
wire   [31:0] i_1_fu_554_p2;
reg   [31:0] i_1_reg_744;
reg   [6:0] aligned_seq1_addr_4_reg_749;
wire   [0:0] icmp_ln66_fu_548_p2;
reg   [6:0] aligned_seq1_addr_5_reg_754;
wire  signed [31:0] j_2_fu_570_p2;
reg  signed [31:0] j_2_reg_759;
wire    ap_CS_fsm_state9;
wire   [31:0] i_2_fu_582_p2;
reg   [31:0] i_2_reg_767;
reg   [6:0] aligned_seq2_addr_5_reg_772;
wire   [0:0] icmp_ln66_1_fu_576_p2;
reg   [6:0] aligned_seq2_addr_6_reg_777;
reg  signed [31:0] len_assign_reg_259;
wire    ap_CS_fsm_state5;
reg  signed [31:0] i_0_i_reg_271;
wire    ap_CS_fsm_state8;
reg   [31:0] j_0_in_i_reg_282;
reg  signed [31:0] i_0_i2_reg_292;
wire    ap_CS_fsm_state11;
reg   [31:0] j_0_in_i3_reg_303;
wire  signed [63:0] sext_ln130_fu_380_p1;
wire  signed [63:0] sext_ln133_fu_429_p1;
wire   [63:0] zext_ln133_1_fu_415_p1;
wire   [63:0] zext_ln133_fu_396_p1;
wire  signed [63:0] sext_ln165_fu_438_p1;
wire  signed [63:0] sext_ln140_fu_444_p1;
wire  signed [63:0] sext_ln141_fu_448_p1;
wire  signed [63:0] sext_ln155_fu_523_p1;
wire   [0:0] and_ln148_fu_506_p2;
wire   [0:0] and_ln153_fu_517_p2;
wire   [6:0] aligned_seq2_addr_3_gep_fu_186_p3;
wire  signed [63:0] sext_ln150_fu_530_p1;
wire  signed [63:0] sext_ln145_fu_536_p1;
wire  signed [63:0] sext_ln68_fu_560_p1;
wire  signed [63:0] sext_ln69_fu_565_p1;
wire  signed [63:0] sext_ln68_1_fu_588_p1;
wire  signed [63:0] sext_ln69_1_fu_593_p1;
reg   [31:0] j_0_fu_54;
reg   [31:0] i_0_fu_58;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln127_fu_343_p2;
wire   [0:0] icmp_ln127_1_fu_349_p2;
(* use_dsp48 = "no" *) wire   [14:0] add_ln130_fu_375_p2;
wire   [14:0] trunc_ln140_fu_401_p1;
wire  signed [14:0] mul_ln133_fu_605_p2;
(* use_dsp48 = "no" *) wire   [14:0] add_ln133_2_fu_424_p2;
wire   [0:0] icmp_ln134_fu_452_p2;
wire   [31:0] select_ln134_fu_458_p3;
wire   [31:0] diag_score_1_fu_466_p2;
wire   [0:0] grp_fu_313_p2;
wire   [0:0] icmp_ln142_1_fu_472_p2;
wire   [31:0] up_score_fu_489_p2;
wire   [0:0] icmp_ln148_fu_495_p2;
wire   [0:0] icmp_ln148_1_fu_501_p2;
wire   [31:0] left_score_fu_483_p2;
wire   [0:0] icmp_ln153_1_fu_512_p2;
wire   [7:0] mul_ln130_fu_598_p0;
wire  signed [14:0] mul_ln130_fu_598_p1;
wire   [7:0] mul_ln133_fu_605_p0;
wire  signed [14:0] mul_ln133_fu_605_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

SmithWaterman_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
SmithWaterman_mulbkb_U6(
    .din0(mul_ln130_fu_598_p0),
    .din1(mul_ln130_fu_598_p1),
    .dout(mul_ln130_fu_598_p2)
);

SmithWaterman_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
SmithWaterman_mulbkb_U7(
    .din0(mul_ln133_fu_605_p0),
    .din1(mul_ln133_fu_605_p1),
    .dout(mul_ln133_fu_605_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        i_0_fu_58 <= i_reg_681;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_fu_58 <= pos_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln66_fu_548_p2 == 1'd0))) begin
        i_0_i2_reg_292 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i2_reg_292 <= i_2_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i_reg_271 <= i_1_reg_744;
    end else if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln130_fu_385_p2 == 1'd1) | (1'd0 == and_ln127_reg_637)))) begin
        i_0_i_reg_271 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        j_0_fu_54 <= j_1_reg_671;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_fu_54 <= pos_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln66_fu_548_p2 == 1'd0))) begin
        j_0_in_i3_reg_303 <= len_assign_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_0_in_i3_reg_303 <= j_2_reg_759;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_in_i_reg_282 <= j_reg_736;
    end else if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln130_fu_385_p2 == 1'd1) | (1'd0 == and_ln127_reg_637)))) begin
        j_0_in_i_reg_282 <= len_assign_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        len_assign_reg_259 <= add_ln146_reg_641;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        len_assign_reg_259 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln127_reg_637) & (1'b1 == ap_CS_fsm_state3))) begin
        H_load_reg_661 <= H_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln127_reg_637) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln130_fu_385_p2 == 1'd0))) begin
        add_ln140_reg_676 <= add_ln140_fu_405_p2;
        add_ln141_reg_691 <= add_ln141_fu_434_p2;
        i_reg_681 <= i_fu_410_p2;
        j_1_reg_671 <= j_1_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln146_reg_641 <= add_ln146_fu_361_p2;
        and_ln127_reg_637 <= and_ln127_fu_355_p2;
        i_0_load_reg_632 <= i_0_fu_58;
        j_0_load_reg_627 <= j_0_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        aligned_seq1_addr_4_reg_749 <= sext_ln68_fu_560_p1;
        aligned_seq1_addr_5_reg_754 <= sext_ln69_fu_565_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_1_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        aligned_seq2_addr_5_reg_772 <= sext_ln68_1_fu_588_p1;
        aligned_seq2_addr_6_reg_777 <= sext_ln69_1_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln142_reg_726 <= and_ln142_fu_477_p2;
        seq1_load_reg_716 <= seq1_q0;
        seq2_load_reg_721 <= seq2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_744 <= i_1_fu_554_p2;
        j_reg_736 <= j_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_767 <= i_2_fu_582_p2;
        j_2_reg_759 <= j_2_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln127_fu_355_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln130_reg_651 <= mul_ln130_fu_598_p2;
        trunc_ln130_reg_646 <= trunc_ln130_fu_367_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        H_address0 = sext_ln140_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        H_address0 = sext_ln133_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        H_address0 = sext_ln130_fu_380_p1;
    end else begin
        H_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        H_ce0 = 1'b1;
    end else begin
        H_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        H_ce1 = 1'b1;
    end else begin
        H_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        aligned_seq1_address0 = aligned_seq1_addr_5_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        aligned_seq1_address0 = aligned_seq1_addr_4_reg_749;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        aligned_seq1_address0 = sext_ln69_fu_565_p1;
    end else if (((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5))) begin
        aligned_seq1_address0 = sext_ln145_fu_536_p1;
    end else if (((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq1_address0 = sext_ln150_fu_530_p1;
    end else if ((((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq1_address0 = sext_ln155_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aligned_seq1_address0 = sext_ln165_fu_438_p1;
    end else begin
        aligned_seq1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq1_ce0 = 1'b1;
    end else begin
        aligned_seq1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        aligned_seq1_d0 = aligned_seq1_q0;
    end else if (((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq1_d0 = 8'd45;
    end else if ((((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq1_d0 = seq1_load_reg_716;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aligned_seq1_d0 = 8'd0;
    end else begin
        aligned_seq1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state3) & ((icmp_ln130_fu_385_p2 == 1'd1) | (1'd0 == and_ln127_reg_637))) | ((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq1_we0 = 1'b1;
    end else begin
        aligned_seq1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        aligned_seq2_address0 = aligned_seq2_addr_6_reg_777;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        aligned_seq2_address0 = aligned_seq2_addr_5_reg_772;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        aligned_seq2_address0 = sext_ln69_1_fu_593_p1;
    end else if (((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5))) begin
        aligned_seq2_address0 = sext_ln145_fu_536_p1;
    end else if (((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq2_address0 = sext_ln150_fu_530_p1;
    end else if (((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq2_address0 = aligned_seq2_addr_3_gep_fu_186_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq2_address0 = sext_ln155_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aligned_seq2_address0 = sext_ln165_fu_438_p1;
    end else begin
        aligned_seq2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq2_ce0 = 1'b1;
    end else begin
        aligned_seq2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        aligned_seq2_d0 = aligned_seq2_q0;
    end else if (((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726))) begin
        aligned_seq2_d0 = 8'd45;
    end else if ((((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq2_d0 = seq2_load_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aligned_seq2_d0 = 8'd0;
    end else begin
        aligned_seq2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state3) & ((icmp_ln130_fu_385_p2 == 1'd1) | (1'd0 == and_ln127_reg_637))) | ((1'd1 == and_ln142_reg_726) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln148_fu_506_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln142_reg_726)) | ((1'd1 == and_ln153_fu_517_p2) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln153_fu_517_p2) & (1'd0 == and_ln148_fu_506_p2) & (1'd0 == and_ln142_reg_726)))) begin
        aligned_seq2_we0 = 1'b1;
    end else begin
        aligned_seq2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln66_1_fu_576_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln66_1_fu_576_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        seq1_ce0 = 1'b1;
    end else begin
        seq1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        seq2_ce0 = 1'b1;
    end else begin
        seq2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln130_fu_385_p2 == 1'd1) | (1'd0 == and_ln127_reg_637)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln66_fu_548_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln66_1_fu_576_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_address1 = sext_ln141_fu_448_p1;

assign add_ln130_fu_375_p2 = ($signed(mul_ln130_fu_598_p2) + $signed(trunc_ln130_fu_367_p1));

assign add_ln133_2_fu_424_p2 = ($signed(mul_ln133_fu_605_p2) + $signed(trunc_ln140_fu_401_p1));

assign add_ln140_fu_405_p2 = ($signed(mul_ln130_reg_651) + $signed(trunc_ln140_fu_401_p1));

assign add_ln141_fu_434_p2 = ($signed(mul_ln133_fu_605_p2) + $signed(trunc_ln130_reg_646));

assign add_ln146_fu_361_p2 = ($signed(len_assign_reg_259) + $signed(32'd1));

assign aligned_seq2_addr_3_gep_fu_186_p3 = sext_ln155_fu_523_p1;

assign and_ln127_fu_355_p2 = (icmp_ln127_fu_343_p2 & icmp_ln127_1_fu_349_p2);

assign and_ln142_fu_477_p2 = (icmp_ln142_1_fu_472_p2 & grp_fu_313_p2);

assign and_ln148_fu_506_p2 = (icmp_ln148_fu_495_p2 & icmp_ln148_1_fu_501_p2);

assign and_ln153_fu_517_p2 = (icmp_ln153_1_fu_512_p2 & grp_fu_313_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = len_assign_reg_259;

assign diag_score_1_fu_466_p2 = (select_ln134_fu_458_p3 + H_q0);

assign grp_fu_313_p2 = ((H_q0 != 32'd0) ? 1'b1 : 1'b0);

assign i_1_fu_554_p2 = ($signed(i_0_i_reg_271) + $signed(32'd1));

assign i_2_fu_582_p2 = ($signed(i_0_i2_reg_292) + $signed(32'd1));

assign i_fu_410_p2 = ($signed(32'd4294967295) + $signed(i_0_load_reg_632));

assign icmp_ln127_1_fu_349_p2 = (($signed(j_0_fu_54) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_343_p2 = (($signed(i_0_fu_58) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_385_p2 = ((H_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_452_p2 = ((seq1_q0 == seq2_q0) ? 1'b1 : 1'b0);

assign icmp_ln142_1_fu_472_p2 = ((diag_score_1_fu_466_p2 == H_load_reg_661) ? 1'b1 : 1'b0);

assign icmp_ln148_1_fu_501_p2 = ((up_score_fu_489_p2 == H_load_reg_661) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_495_p2 = ((H_q1 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln153_1_fu_512_p2 = ((left_score_fu_483_p2 == H_load_reg_661) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_576_p2 = (($signed(i_0_i2_reg_292) < $signed(j_2_fu_570_p2)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_548_p2 = (($signed(i_0_i_reg_271) < $signed(j_fu_542_p2)) ? 1'b1 : 1'b0);

assign j_1_fu_391_p2 = ($signed(32'd4294967295) + $signed(j_0_load_reg_627));

assign j_2_fu_570_p2 = ($signed(j_0_in_i3_reg_303) + $signed(32'd4294967295));

assign j_fu_542_p2 = ($signed(j_0_in_i_reg_282) + $signed(32'd4294967295));

assign left_score_fu_483_p2 = ($signed(32'd4294967294) + $signed(H_q0));

assign mul_ln130_fu_598_p0 = 15'd101;

assign mul_ln130_fu_598_p1 = i_0_fu_58[14:0];

assign mul_ln133_fu_605_p0 = 15'd101;

assign mul_ln133_fu_605_p1 = i_fu_410_p2[14:0];

assign select_ln134_fu_458_p3 = ((icmp_ln134_fu_452_p2[0:0] === 1'b1) ? 32'd3 : 32'd4294967293);

assign seq1_address0 = zext_ln133_1_fu_415_p1;

assign seq2_address0 = zext_ln133_fu_396_p1;

assign sext_ln130_fu_380_p1 = $signed(add_ln130_fu_375_p2);

assign sext_ln133_fu_429_p1 = $signed(add_ln133_2_fu_424_p2);

assign sext_ln140_fu_444_p1 = $signed(add_ln140_reg_676);

assign sext_ln141_fu_448_p1 = $signed(add_ln141_reg_691);

assign sext_ln145_fu_536_p1 = len_assign_reg_259;

assign sext_ln150_fu_530_p1 = len_assign_reg_259;

assign sext_ln155_fu_523_p1 = len_assign_reg_259;

assign sext_ln165_fu_438_p1 = len_assign_reg_259;

assign sext_ln68_1_fu_588_p1 = i_0_i2_reg_292;

assign sext_ln68_fu_560_p1 = i_0_i_reg_271;

assign sext_ln69_1_fu_593_p1 = j_2_fu_570_p2;

assign sext_ln69_fu_565_p1 = j_fu_542_p2;

assign trunc_ln130_fu_367_p1 = j_0_fu_54[14:0];

assign trunc_ln140_fu_401_p1 = j_1_fu_391_p2[14:0];

assign up_score_fu_489_p2 = ($signed(32'd4294967294) + $signed(H_q1));

assign zext_ln133_1_fu_415_p1 = i_fu_410_p2;

assign zext_ln133_fu_396_p1 = j_1_fu_391_p2;

endmodule //traceback
