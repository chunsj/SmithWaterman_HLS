-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SmithWaterman is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq1_ce0 : OUT STD_LOGIC;
    seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq2_ce0 : OUT STD_LOGIC;
    seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    aligned_seq1_ce0 : OUT STD_LOGIC;
    aligned_seq1_we0 : OUT STD_LOGIC;
    aligned_seq1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    n : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_ap_vld : OUT STD_LOGIC;
    aligned_seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    aligned_seq2_ce0 : OUT STD_LOGIC;
    aligned_seq2_we0 : OUT STD_LOGIC;
    aligned_seq2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_ap_vld : OUT STD_LOGIC;
    l : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_ap_vld : OUT STD_LOGIC );
end;


architecture behav of SmithWaterman is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SmithWaterman,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.941500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=19,HLS_SYN_DSP=2,HLS_SYN_FF=996,HLS_SYN_LUT=1939,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv15_65 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln25_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_248_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln27_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln33_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln35_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_0_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_align_fu_203_ap_ready : STD_LOGIC;
    signal grp_align_fu_203_ap_done : STD_LOGIC;
    signal pos_1_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal H_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal H_ce0 : STD_LOGIC;
    signal H_we0 : STD_LOGIC;
    signal H_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal H_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal H_ce1 : STD_LOGIC;
    signal H_we1 : STD_LOGIC;
    signal H_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_traceback_fu_187_ap_start : STD_LOGIC;
    signal grp_traceback_fu_187_ap_done : STD_LOGIC;
    signal grp_traceback_fu_187_ap_idle : STD_LOGIC;
    signal grp_traceback_fu_187_ap_ready : STD_LOGIC;
    signal grp_traceback_fu_187_seq1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_traceback_fu_187_seq1_ce0 : STD_LOGIC;
    signal grp_traceback_fu_187_seq2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_traceback_fu_187_seq2_ce0 : STD_LOGIC;
    signal grp_traceback_fu_187_H_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_traceback_fu_187_H_ce0 : STD_LOGIC;
    signal grp_traceback_fu_187_H_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_traceback_fu_187_H_ce1 : STD_LOGIC;
    signal grp_traceback_fu_187_aligned_seq1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_traceback_fu_187_aligned_seq1_ce0 : STD_LOGIC;
    signal grp_traceback_fu_187_aligned_seq1_we0 : STD_LOGIC;
    signal grp_traceback_fu_187_aligned_seq1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_traceback_fu_187_aligned_seq2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_traceback_fu_187_aligned_seq2_ce0 : STD_LOGIC;
    signal grp_traceback_fu_187_aligned_seq2_we0 : STD_LOGIC;
    signal grp_traceback_fu_187_aligned_seq2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_traceback_fu_187_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_align_fu_203_ap_start : STD_LOGIC;
    signal grp_align_fu_203_ap_idle : STD_LOGIC;
    signal grp_align_fu_203_seq1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_align_fu_203_seq1_ce0 : STD_LOGIC;
    signal grp_align_fu_203_seq2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_align_fu_203_seq2_ce0 : STD_LOGIC;
    signal grp_align_fu_203_H_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_align_fu_203_H_ce0 : STD_LOGIC;
    signal grp_align_fu_203_H_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_align_fu_203_H_ce1 : STD_LOGIC;
    signal grp_align_fu_203_H_we1 : STD_LOGIC;
    signal grp_align_fu_203_H_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_align_fu_203_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_align_fu_203_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_137 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_load_reg_149 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_162 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_local_0_reg_174 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_traceback_fu_187_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_align_fu_203_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln26_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_231_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln26_fu_231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln26_fu_231_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component traceback IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        seq1_ce0 : OUT STD_LOGIC;
        seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        seq2_ce0 : OUT STD_LOGIC;
        seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        H_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        H_ce0 : OUT STD_LOGIC;
        H_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        H_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        H_ce1 : OUT STD_LOGIC;
        H_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pos_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pos_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        aligned_seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        aligned_seq1_ce0 : OUT STD_LOGIC;
        aligned_seq1_we0 : OUT STD_LOGIC;
        aligned_seq1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        aligned_seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        aligned_seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        aligned_seq2_ce0 : OUT STD_LOGIC;
        aligned_seq2_we0 : OUT STD_LOGIC;
        aligned_seq2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        aligned_seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component align IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        seq1_ce0 : OUT STD_LOGIC;
        seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        n : IN STD_LOGIC_VECTOR (6 downto 0);
        seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        seq2_ce0 : OUT STD_LOGIC;
        seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m : IN STD_LOGIC_VECTOR (6 downto 0);
        H_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        H_ce0 : OUT STD_LOGIC;
        H_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        H_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        H_ce1 : OUT STD_LOGIC;
        H_we1 : OUT STD_LOGIC;
        H_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        H_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SmithWaterman_H IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    H_U : component SmithWaterman_H
    generic map (
        DataWidth => 32,
        AddressRange => 10201,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => H_address0,
        ce0 => H_ce0,
        we0 => H_we0,
        d0 => ap_const_lv32_0,
        q0 => H_q0,
        address1 => H_address1,
        ce1 => H_ce1,
        we1 => H_we1,
        d1 => grp_align_fu_203_H_d1,
        q1 => H_q1);

    grp_traceback_fu_187 : component traceback
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_traceback_fu_187_ap_start,
        ap_done => grp_traceback_fu_187_ap_done,
        ap_idle => grp_traceback_fu_187_ap_idle,
        ap_ready => grp_traceback_fu_187_ap_ready,
        seq1_address0 => grp_traceback_fu_187_seq1_address0,
        seq1_ce0 => grp_traceback_fu_187_seq1_ce0,
        seq1_q0 => seq1_q0,
        seq2_address0 => grp_traceback_fu_187_seq2_address0,
        seq2_ce0 => grp_traceback_fu_187_seq2_ce0,
        seq2_q0 => seq2_q0,
        H_address0 => grp_traceback_fu_187_H_address0,
        H_ce0 => grp_traceback_fu_187_H_ce0,
        H_q0 => H_q0,
        H_address1 => grp_traceback_fu_187_H_address1,
        H_ce1 => grp_traceback_fu_187_H_ce1,
        H_q1 => H_q1,
        pos_0_read => pos_0_reg_329,
        pos_1_read => pos_1_reg_334,
        aligned_seq1_address0 => grp_traceback_fu_187_aligned_seq1_address0,
        aligned_seq1_ce0 => grp_traceback_fu_187_aligned_seq1_ce0,
        aligned_seq1_we0 => grp_traceback_fu_187_aligned_seq1_we0,
        aligned_seq1_d0 => grp_traceback_fu_187_aligned_seq1_d0,
        aligned_seq1_q0 => aligned_seq1_q0,
        aligned_seq2_address0 => grp_traceback_fu_187_aligned_seq2_address0,
        aligned_seq2_ce0 => grp_traceback_fu_187_aligned_seq2_ce0,
        aligned_seq2_we0 => grp_traceback_fu_187_aligned_seq2_we0,
        aligned_seq2_d0 => grp_traceback_fu_187_aligned_seq2_d0,
        aligned_seq2_q0 => aligned_seq2_q0,
        ap_return => grp_traceback_fu_187_ap_return);

    grp_align_fu_203 : component align
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_align_fu_203_ap_start,
        ap_done => grp_align_fu_203_ap_done,
        ap_idle => grp_align_fu_203_ap_idle,
        ap_ready => grp_align_fu_203_ap_ready,
        seq1_address0 => grp_align_fu_203_seq1_address0,
        seq1_ce0 => grp_align_fu_203_seq1_ce0,
        seq1_q0 => seq1_q0,
        n => n_load_reg_149,
        seq2_address0 => grp_align_fu_203_seq2_address0,
        seq2_ce0 => grp_align_fu_203_seq2_ce0,
        seq2_q0 => seq2_q0,
        m => m_local_0_reg_174,
        H_address0 => grp_align_fu_203_H_address0,
        H_ce0 => grp_align_fu_203_H_ce0,
        H_q0 => H_q0,
        H_address1 => grp_align_fu_203_H_address1,
        H_ce1 => grp_align_fu_203_H_ce1,
        H_we1 => grp_align_fu_203_H_we1,
        H_d1 => grp_align_fu_203_H_d1,
        H_q1 => H_q1,
        ap_return_0 => grp_align_fu_203_ap_return_0,
        ap_return_1 => grp_align_fu_203_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_align_fu_203_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_align_fu_203_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_align_fu_203_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_align_fu_203_ap_ready = ap_const_logic_1)) then 
                    grp_align_fu_203_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_traceback_fu_187_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_traceback_fu_187_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_traceback_fu_187_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_traceback_fu_187_ap_ready = ap_const_logic_1)) then 
                    grp_traceback_fu_187_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_242_p2 = ap_const_lv1_0) and (icmp_ln25_reg_296 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_137 <= i_fu_248_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_137 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    i_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_162 <= i_3_fu_277_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln27_fu_242_p2 = ap_const_lv1_1) or (icmp_ln25_reg_296 = ap_const_lv1_0)))) then 
                i_1_reg_162 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    m_local_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_local_0_reg_174 <= ap_const_lv7_64;
            elsif (((icmp_ln35_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_local_0_reg_174 <= i_1_reg_162;
            end if; 
        end if;
    end process;

    n_load_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_load_reg_149 <= ap_const_lv7_64;
            elsif (((icmp_ln27_fu_242_p2 = ap_const_lv1_1) and (icmp_ln25_reg_296 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                n_load_reg_149 <= i_0_reg_137;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln25_reg_296 <= icmp_ln25_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_align_fu_203_ap_done = ap_const_logic_1))) then
                pos_0_reg_329 <= grp_align_fu_203_ap_return_0;
                pos_1_reg_334 <= grp_align_fu_203_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln25_reg_296, ap_CS_fsm_state3, icmp_ln27_fu_242_p2, ap_CS_fsm_state4, icmp_ln33_fu_259_p2, ap_CS_fsm_state5, icmp_ln35_fu_271_p2, ap_CS_fsm_state7, grp_align_fu_203_ap_done, grp_traceback_fu_187_ap_done, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln27_fu_242_p2 = ap_const_lv1_1) or (icmp_ln25_reg_296 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln33_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln35_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_align_fu_203_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_traceback_fu_187_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    H_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, grp_traceback_fu_187_H_address0, grp_align_fu_203_H_address0, ap_CS_fsm_state9, zext_ln26_2_fu_237_p1, zext_ln34_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            H_address0 <= zext_ln34_fu_265_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            H_address0 <= zext_ln26_2_fu_237_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            H_address0 <= ap_const_lv64_0(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            H_address0 <= grp_align_fu_203_H_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            H_address0 <= grp_traceback_fu_187_H_address0;
        else 
            H_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    H_address1_assign_proc : process(ap_CS_fsm_state7, grp_traceback_fu_187_H_address1, grp_align_fu_203_H_address1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            H_address1 <= grp_align_fu_203_H_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            H_address1 <= grp_traceback_fu_187_H_address1;
        else 
            H_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    H_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, grp_traceback_fu_187_H_ce0, grp_align_fu_203_H_ce0, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            H_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            H_ce0 <= grp_align_fu_203_H_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            H_ce0 <= grp_traceback_fu_187_H_ce0;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_state7, grp_traceback_fu_187_H_ce1, grp_align_fu_203_H_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            H_ce1 <= grp_align_fu_203_H_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            H_ce1 <= grp_traceback_fu_187_H_ce1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    H_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln25_reg_296, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln33_fu_259_p2)
    begin
        if ((((icmp_ln33_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln25_reg_296 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            H_we0 <= ap_const_logic_1;
        else 
            H_we0 <= ap_const_logic_0;
        end if; 
    end process;


    H_we1_assign_proc : process(ap_CS_fsm_state7, grp_align_fu_203_H_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            H_we1 <= grp_align_fu_203_H_we1;
        else 
            H_we1 <= ap_const_logic_0;
        end if; 
    end process;

    aligned_seq1_address0 <= grp_traceback_fu_187_aligned_seq1_address0;
    aligned_seq1_ce0 <= grp_traceback_fu_187_aligned_seq1_ce0;
    aligned_seq1_d0 <= grp_traceback_fu_187_aligned_seq1_d0;
    aligned_seq1_we0 <= grp_traceback_fu_187_aligned_seq1_we0;
    aligned_seq2_address0 <= grp_traceback_fu_187_aligned_seq2_address0;
    aligned_seq2_ce0 <= grp_traceback_fu_187_aligned_seq2_ce0;
    aligned_seq2_d0 <= grp_traceback_fu_187_aligned_seq2_d0;
    aligned_seq2_we0 <= grp_traceback_fu_187_aligned_seq2_we0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_traceback_fu_187_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_traceback_fu_187_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_traceback_fu_187_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_traceback_fu_187_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_align_fu_203_ap_start <= grp_align_fu_203_ap_start_reg;
    grp_traceback_fu_187_ap_start <= grp_traceback_fu_187_ap_start_reg;
    i_3_fu_277_p2 <= std_logic_vector(unsigned(i_1_reg_162) + unsigned(ap_const_lv7_1));
    i_fu_248_p2 <= std_logic_vector(unsigned(i_0_reg_137) + unsigned(ap_const_lv7_1));
    icmp_ln25_fu_216_p2 <= "1" when (unsigned(i_0_reg_137) < unsigned(ap_const_lv7_65)) else "0";
    icmp_ln27_fu_242_p2 <= "1" when (seq1_q0 = ap_const_lv8_0) else "0";
    icmp_ln33_fu_259_p2 <= "1" when (unsigned(i_1_reg_162) < unsigned(ap_const_lv7_65)) else "0";
    icmp_ln35_fu_271_p2 <= "1" when (seq2_q0 = ap_const_lv8_0) else "0";
    l <= grp_traceback_fu_187_ap_return;

    l_ap_vld_assign_proc : process(grp_traceback_fu_187_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_traceback_fu_187_ap_done = ap_const_logic_1))) then 
            l_ap_vld <= ap_const_logic_1;
        else 
            l_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_local_0_reg_174),32));

    m_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_ap_vld <= ap_const_logic_1;
        else 
            m_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_231_p0 <= mul_ln26_fu_231_p00(7 - 1 downto 0);
    mul_ln26_fu_231_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),15));
    mul_ln26_fu_231_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_231_p0) * unsigned(ap_const_lv15_65), 15));

    n_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln25_reg_296, ap_CS_fsm_state3, icmp_ln27_fu_242_p2, zext_ln25_fu_254_p1)
    begin
        if (((icmp_ln27_fu_242_p2 = ap_const_lv1_1) and (icmp_ln25_reg_296 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            n <= zext_ln25_fu_254_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            n <= ap_const_lv32_64;
        else 
            n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    n_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln25_reg_296, ap_CS_fsm_state3, icmp_ln27_fu_242_p2)
    begin
        if ((((icmp_ln27_fu_242_p2 = ap_const_lv1_1) and (icmp_ln25_reg_296 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            n_ap_vld <= ap_const_logic_1;
        else 
            n_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    seq1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, grp_traceback_fu_187_seq1_address0, grp_align_fu_203_seq1_address0, ap_CS_fsm_state9, zext_ln26_fu_222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seq1_address0 <= zext_ln26_fu_222_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seq1_address0 <= grp_align_fu_203_seq1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seq1_address0 <= grp_traceback_fu_187_seq1_address0;
        else 
            seq1_address0 <= "XXXXXXX";
        end if; 
    end process;


    seq1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, grp_traceback_fu_187_seq1_ce0, grp_align_fu_203_seq1_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seq1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seq1_ce0 <= grp_align_fu_203_seq1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seq1_ce0 <= grp_traceback_fu_187_seq1_ce0;
        else 
            seq1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seq2_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, grp_traceback_fu_187_seq2_address0, grp_align_fu_203_seq2_address0, ap_CS_fsm_state9, zext_ln34_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seq2_address0 <= zext_ln34_fu_265_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seq2_address0 <= grp_align_fu_203_seq2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seq2_address0 <= grp_traceback_fu_187_seq2_address0;
        else 
            seq2_address0 <= "XXXXXXX";
        end if; 
    end process;


    seq2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, grp_traceback_fu_187_seq2_ce0, grp_align_fu_203_seq2_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seq2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seq2_ce0 <= grp_align_fu_203_seq2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seq2_ce0 <= grp_traceback_fu_187_seq2_ce0;
        else 
            seq2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),32));
    zext_ln26_2_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_231_p2),64));
    zext_ln26_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),64));
    zext_ln34_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_162),64));
end behav;
