-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traceback is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq1_ce0 : OUT STD_LOGIC;
    seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq2_ce0 : OUT STD_LOGIC;
    seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    H_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    H_ce0 : OUT STD_LOGIC;
    H_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    H_ce1 : OUT STD_LOGIC;
    H_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    aligned_seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    aligned_seq1_ce0 : OUT STD_LOGIC;
    aligned_seq1_we0 : OUT STD_LOGIC;
    aligned_seq1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    aligned_seq2_ce0 : OUT STD_LOGIC;
    aligned_seq2_we0 : OUT STD_LOGIC;
    aligned_seq2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    aligned_seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of traceback is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv15_65 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_0_load_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_0_load_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln127_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln146_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln146_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln130_fu_367_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln130_reg_646 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln130_fu_598_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln130_reg_651 : STD_LOGIC_VECTOR (14 downto 0);
    signal H_load_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln130_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_fu_405_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln140_fu_405_p2 : signal is "no";
    signal add_ln140_reg_676 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln141_fu_434_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln141_fu_434_p2 : signal is "no";
    signal add_ln141_reg_691 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal seq1_load_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal seq2_load_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln142_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln142_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal aligned_seq1_addr_4_reg_749 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln66_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aligned_seq1_addr_5_reg_754 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal aligned_seq2_addr_5_reg_772 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln66_1_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aligned_seq2_addr_6_reg_777 : STD_LOGIC_VECTOR (6 downto 0);
    signal len_assign_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_i_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_0_in_i_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i2_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_0_in_i3_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln130_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln133_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln165_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln141_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln155_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln148_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln153_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aligned_seq2_addr_3_gep_fu_186_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln150_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln145_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_1_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_1_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln127_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln130_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln130_fu_375_p2 : signal is "no";
    signal trunc_ln140_fu_401_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln133_fu_605_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln133_2_fu_424_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln133_2_fu_424_p2 : signal is "no";
    signal icmp_ln134_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln134_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_score_1_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal up_score_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln148_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal left_score_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln153_1_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln130_fu_598_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln130_fu_598_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln133_fu_605_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln133_fu_605_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component SmithWaterman_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SmithWaterman_mulbkb_U6 : component SmithWaterman_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln130_fu_598_p0,
        din1 => mul_ln130_fu_598_p1,
        dout => mul_ln130_fu_598_p2);

    SmithWaterman_mulbkb_U7 : component SmithWaterman_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln133_fu_605_p0,
        din1 => mul_ln133_fu_605_p1,
        dout => mul_ln133_fu_605_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
                i_0_fu_58 <= i_reg_681;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_fu_58 <= pos_0_read;
            end if; 
        end if;
    end process;

    i_0_i2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln66_fu_548_p2 = ap_const_lv1_0))) then 
                i_0_i2_reg_292 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i2_reg_292 <= i_2_reg_767;
            end if; 
        end if;
    end process;

    i_0_i_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_271 <= i_1_reg_744;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln130_fu_385_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln127_reg_637)))) then 
                i_0_i_reg_271 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
                j_0_fu_54 <= j_1_reg_671;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_fu_54 <= pos_1_read;
            end if; 
        end if;
    end process;

    j_0_in_i3_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln66_fu_548_p2 = ap_const_lv1_0))) then 
                j_0_in_i3_reg_303 <= len_assign_reg_259;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_in_i3_reg_303 <= j_2_reg_759;
            end if; 
        end if;
    end process;

    j_0_in_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_in_i_reg_282 <= j_reg_736;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln130_fu_385_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln127_reg_637)))) then 
                j_0_in_i_reg_282 <= len_assign_reg_259;
            end if; 
        end if;
    end process;

    len_assign_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                len_assign_reg_259 <= add_ln146_reg_641;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                len_assign_reg_259 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln127_reg_637) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                H_load_reg_661 <= H_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln127_reg_637) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln130_fu_385_p2 = ap_const_lv1_0))) then
                add_ln140_reg_676 <= add_ln140_fu_405_p2;
                add_ln141_reg_691 <= add_ln141_fu_434_p2;
                i_reg_681 <= i_fu_410_p2;
                j_1_reg_671 <= j_1_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln146_reg_641 <= add_ln146_fu_361_p2;
                and_ln127_reg_637 <= and_ln127_fu_355_p2;
                i_0_load_reg_632 <= i_0_fu_58;
                j_0_load_reg_627 <= j_0_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                aligned_seq1_addr_4_reg_749 <= sext_ln68_fu_560_p1(7 - 1 downto 0);
                aligned_seq1_addr_5_reg_754 <= sext_ln69_fu_565_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_1_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                aligned_seq2_addr_5_reg_772 <= sext_ln68_1_fu_588_p1(7 - 1 downto 0);
                aligned_seq2_addr_6_reg_777 <= sext_ln69_1_fu_593_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln142_reg_726 <= and_ln142_fu_477_p2;
                seq1_load_reg_716 <= seq1_q0;
                seq2_load_reg_721 <= seq2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_reg_744 <= i_1_fu_554_p2;
                j_reg_736 <= j_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_767 <= i_2_fu_582_p2;
                j_2_reg_759 <= j_2_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln127_fu_355_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln130_reg_651 <= mul_ln130_fu_598_p2;
                trunc_ln130_reg_646 <= trunc_ln130_fu_367_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, and_ln127_reg_637, ap_CS_fsm_state3, icmp_ln130_fu_385_p2, ap_CS_fsm_state6, icmp_ln66_fu_548_p2, ap_CS_fsm_state9, icmp_ln66_1_fu_576_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln130_fu_385_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln127_reg_637)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln66_fu_548_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln66_1_fu_576_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    H_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln130_fu_380_p1, sext_ln133_fu_429_p1, sext_ln140_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            H_address0 <= sext_ln140_fu_444_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            H_address0 <= sext_ln133_fu_429_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            H_address0 <= sext_ln130_fu_380_p1(14 - 1 downto 0);
        else 
            H_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    H_address1 <= sext_ln141_fu_448_p1(14 - 1 downto 0);

    H_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            H_ce0 <= ap_const_logic_1;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            H_ce1 <= ap_const_logic_1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln130_fu_375_p2 <= std_logic_vector(signed(mul_ln130_fu_598_p2) + signed(trunc_ln130_fu_367_p1));
    add_ln133_2_fu_424_p2 <= std_logic_vector(signed(mul_ln133_fu_605_p2) + signed(trunc_ln140_fu_401_p1));
    add_ln140_fu_405_p2 <= std_logic_vector(signed(mul_ln130_reg_651) + signed(trunc_ln140_fu_401_p1));
    add_ln141_fu_434_p2 <= std_logic_vector(signed(mul_ln133_fu_605_p2) + signed(trunc_ln130_reg_646));
    add_ln146_fu_361_p2 <= std_logic_vector(signed(len_assign_reg_259) + signed(ap_const_lv32_1));

    aligned_seq1_address0_assign_proc : process(ap_CS_fsm_state3, and_ln142_reg_726, ap_CS_fsm_state6, aligned_seq1_addr_4_reg_749, aligned_seq1_addr_5_reg_754, ap_CS_fsm_state5, ap_CS_fsm_state8, sext_ln165_fu_438_p1, sext_ln155_fu_523_p1, and_ln148_fu_506_p2, and_ln153_fu_517_p2, sext_ln150_fu_530_p1, sext_ln145_fu_536_p1, sext_ln69_fu_565_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aligned_seq1_address0 <= aligned_seq1_addr_5_reg_754;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            aligned_seq1_address0 <= aligned_seq1_addr_4_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aligned_seq1_address0 <= sext_ln69_fu_565_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            aligned_seq1_address0 <= sext_ln145_fu_536_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq1_address0 <= sext_ln150_fu_530_p1(7 - 1 downto 0);
        elsif ((((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq1_address0 <= sext_ln155_fu_523_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aligned_seq1_address0 <= sext_ln165_fu_438_p1(7 - 1 downto 0);
        else 
            aligned_seq1_address0 <= "XXXXXXX";
        end if; 
    end process;


    aligned_seq1_ce0_assign_proc : process(ap_CS_fsm_state3, and_ln142_reg_726, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq1_ce0 <= ap_const_logic_1;
        else 
            aligned_seq1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aligned_seq1_d0_assign_proc : process(aligned_seq1_q0, ap_CS_fsm_state3, seq1_load_reg_716, and_ln142_reg_726, ap_CS_fsm_state5, ap_CS_fsm_state8, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            aligned_seq1_d0 <= aligned_seq1_q0;
        elsif (((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq1_d0 <= ap_const_lv8_2D;
        elsif ((((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq1_d0 <= seq1_load_reg_716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aligned_seq1_d0 <= ap_const_lv8_0;
        else 
            aligned_seq1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    aligned_seq1_we0_assign_proc : process(and_ln127_reg_637, ap_CS_fsm_state3, icmp_ln130_fu_385_p2, and_ln142_reg_726, ap_CS_fsm_state5, ap_CS_fsm_state8, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln130_fu_385_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln127_reg_637))) or ((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq1_we0 <= ap_const_logic_1;
        else 
            aligned_seq1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    aligned_seq2_addr_3_gep_fu_186_p3 <= sext_ln155_fu_523_p1(7 - 1 downto 0);

    aligned_seq2_address0_assign_proc : process(ap_CS_fsm_state3, and_ln142_reg_726, ap_CS_fsm_state9, aligned_seq2_addr_5_reg_772, aligned_seq2_addr_6_reg_777, ap_CS_fsm_state5, ap_CS_fsm_state11, sext_ln165_fu_438_p1, sext_ln155_fu_523_p1, and_ln148_fu_506_p2, and_ln153_fu_517_p2, aligned_seq2_addr_3_gep_fu_186_p3, sext_ln150_fu_530_p1, sext_ln145_fu_536_p1, sext_ln69_1_fu_593_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            aligned_seq2_address0 <= aligned_seq2_addr_6_reg_777;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aligned_seq2_address0 <= aligned_seq2_addr_5_reg_772;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            aligned_seq2_address0 <= sext_ln69_1_fu_593_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            aligned_seq2_address0 <= sext_ln145_fu_536_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq2_address0 <= sext_ln150_fu_530_p1(7 - 1 downto 0);
        elsif (((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq2_address0 <= aligned_seq2_addr_3_gep_fu_186_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq2_address0 <= sext_ln155_fu_523_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aligned_seq2_address0 <= sext_ln165_fu_438_p1(7 - 1 downto 0);
        else 
            aligned_seq2_address0 <= "XXXXXXX";
        end if; 
    end process;


    aligned_seq2_ce0_assign_proc : process(ap_CS_fsm_state3, and_ln142_reg_726, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state11, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq2_ce0 <= ap_const_logic_1;
        else 
            aligned_seq2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aligned_seq2_d0_assign_proc : process(aligned_seq2_q0, ap_CS_fsm_state3, seq2_load_reg_721, and_ln142_reg_726, ap_CS_fsm_state5, ap_CS_fsm_state11, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            aligned_seq2_d0 <= aligned_seq2_q0;
        elsif (((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726))) then 
            aligned_seq2_d0 <= ap_const_lv8_2D;
        elsif ((((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq2_d0 <= seq2_load_reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aligned_seq2_d0 <= ap_const_lv8_0;
        else 
            aligned_seq2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    aligned_seq2_we0_assign_proc : process(and_ln127_reg_637, ap_CS_fsm_state3, icmp_ln130_fu_385_p2, and_ln142_reg_726, ap_CS_fsm_state5, ap_CS_fsm_state11, and_ln148_fu_506_p2, and_ln153_fu_517_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln130_fu_385_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln127_reg_637))) or ((ap_const_lv1_1 = and_ln142_reg_726) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln148_fu_506_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_lv1_1 = and_ln153_fu_517_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln153_fu_517_p2) and (ap_const_lv1_0 = and_ln148_fu_506_p2) and (ap_const_lv1_0 = and_ln142_reg_726)))) then 
            aligned_seq2_we0 <= ap_const_logic_1;
        else 
            aligned_seq2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln127_fu_355_p2 <= (icmp_ln127_fu_343_p2 and icmp_ln127_1_fu_349_p2);
    and_ln142_fu_477_p2 <= (icmp_ln142_1_fu_472_p2 and grp_fu_313_p2);
    and_ln148_fu_506_p2 <= (icmp_ln148_fu_495_p2 and icmp_ln148_1_fu_501_p2);
    and_ln153_fu_517_p2 <= (icmp_ln153_1_fu_512_p2 and grp_fu_313_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln66_1_fu_576_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln66_1_fu_576_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln66_1_fu_576_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln66_1_fu_576_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= len_assign_reg_259;
    diag_score_1_fu_466_p2 <= std_logic_vector(unsigned(select_ln134_fu_458_p3) + unsigned(H_q0));
    grp_fu_313_p2 <= "0" when (H_q0 = ap_const_lv32_0) else "1";
    i_1_fu_554_p2 <= std_logic_vector(signed(i_0_i_reg_271) + signed(ap_const_lv32_1));
    i_2_fu_582_p2 <= std_logic_vector(signed(i_0_i2_reg_292) + signed(ap_const_lv32_1));
    i_fu_410_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(i_0_load_reg_632));
    icmp_ln127_1_fu_349_p2 <= "1" when (signed(j_0_fu_54) > signed(ap_const_lv32_0)) else "0";
    icmp_ln127_fu_343_p2 <= "1" when (signed(i_0_fu_58) > signed(ap_const_lv32_0)) else "0";
    icmp_ln130_fu_385_p2 <= "1" when (H_q0 = ap_const_lv32_0) else "0";
    icmp_ln134_fu_452_p2 <= "1" when (seq1_q0 = seq2_q0) else "0";
    icmp_ln142_1_fu_472_p2 <= "1" when (diag_score_1_fu_466_p2 = H_load_reg_661) else "0";
    icmp_ln148_1_fu_501_p2 <= "1" when (up_score_fu_489_p2 = H_load_reg_661) else "0";
    icmp_ln148_fu_495_p2 <= "0" when (H_q1 = ap_const_lv32_0) else "1";
    icmp_ln153_1_fu_512_p2 <= "1" when (left_score_fu_483_p2 = H_load_reg_661) else "0";
    icmp_ln66_1_fu_576_p2 <= "1" when (signed(i_0_i2_reg_292) < signed(j_2_fu_570_p2)) else "0";
    icmp_ln66_fu_548_p2 <= "1" when (signed(i_0_i_reg_271) < signed(j_fu_542_p2)) else "0";
    j_1_fu_391_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(j_0_load_reg_627));
    j_2_fu_570_p2 <= std_logic_vector(unsigned(j_0_in_i3_reg_303) + unsigned(ap_const_lv32_FFFFFFFF));
    j_fu_542_p2 <= std_logic_vector(unsigned(j_0_in_i_reg_282) + unsigned(ap_const_lv32_FFFFFFFF));
    left_score_fu_483_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(H_q0));
    mul_ln130_fu_598_p0 <= ap_const_lv15_65(8 - 1 downto 0);
    mul_ln130_fu_598_p1 <= i_0_fu_58(15 - 1 downto 0);
    mul_ln133_fu_605_p0 <= ap_const_lv15_65(8 - 1 downto 0);
    mul_ln133_fu_605_p1 <= i_fu_410_p2(15 - 1 downto 0);
    select_ln134_fu_458_p3 <= 
        ap_const_lv32_3 when (icmp_ln134_fu_452_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFD;
    seq1_address0 <= zext_ln133_1_fu_415_p1(7 - 1 downto 0);

    seq1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seq1_ce0 <= ap_const_logic_1;
        else 
            seq1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    seq2_address0 <= zext_ln133_fu_396_p1(7 - 1 downto 0);

    seq2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seq2_ce0 <= ap_const_logic_1;
        else 
            seq2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln130_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln130_fu_375_p2),64));

        sext_ln133_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln133_2_fu_424_p2),64));

        sext_ln140_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_reg_676),64));

        sext_ln141_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln141_reg_691),64));

        sext_ln145_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(len_assign_reg_259),64));

        sext_ln150_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(len_assign_reg_259),64));

        sext_ln155_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(len_assign_reg_259),64));

        sext_ln165_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(len_assign_reg_259),64));

        sext_ln68_1_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i2_reg_292),64));

        sext_ln68_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_271),64));

        sext_ln69_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_2_fu_570_p2),64));

        sext_ln69_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_542_p2),64));

    trunc_ln130_fu_367_p1 <= j_0_fu_54(15 - 1 downto 0);
    trunc_ln140_fu_401_p1 <= j_1_fu_391_p2(15 - 1 downto 0);
    up_score_fu_489_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(H_q1));
    zext_ln133_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_410_p2),64));
    zext_ln133_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_391_p2),64));
end behav;
