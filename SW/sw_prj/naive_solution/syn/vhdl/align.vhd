-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity align is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seq1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq1_ce0 : OUT STD_LOGIC;
    seq1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    n : IN STD_LOGIC_VECTOR (6 downto 0);
    seq2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    seq2_ce0 : OUT STD_LOGIC;
    seq2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m : IN STD_LOGIC_VECTOR (6 downto 0);
    H_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    H_ce0 : OUT STD_LOGIC;
    H_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    H_ce1 : OUT STD_LOGIC;
    H_we1 : OUT STD_LOGIC;
    H_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    H_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of align is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv14_65 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100101";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv31_7FFFFFFD : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln89_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln91_fu_212_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln91_reg_498 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln89_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal seq1_addr_reg_504 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln98_fu_222_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln98_reg_509 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln90_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln90_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln99_fu_288_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln99_reg_538 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln100_fu_293_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln100_reg_543 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_548 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal max_1_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln91_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_4_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_1_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_score_0_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln102_2_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_1_0_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln102_1_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_0_0_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln102_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_score_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln91_fu_197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln91_fu_212_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln98_fu_222_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_1_fu_249_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln91_3_fu_260_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln91_2_fu_264_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln98_fu_274_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln99_fu_284_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln92_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_fu_332_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln92_1_fu_324_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal diag_score_2_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_1_fu_342_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln51_fu_364_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln51_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_score_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln54_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal down_score_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln91_fu_212_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln98_fu_222_p00 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_144 <= i_fu_304_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_144 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    j_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_156 <= j_reg_548;
            elsif (((icmp_ln89_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_156 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    max_score_0_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                max_score_0_fu_54 <= select_ln102_2_fu_436_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                max_score_0_fu_54 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pos_0_0_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                pos_0_0_fu_62 <= select_ln102_fu_422_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_0_0_fu_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pos_1_0_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                pos_1_0_fu_58 <= select_ln102_1_fu_429_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_1_0_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln100_reg_543 <= add_ln100_fu_293_p2;
                add_ln99_reg_538 <= add_ln99_fu_288_p2;
                j_reg_548 <= j_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                max_1_reg_563 <= max_1_fu_382_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln91_reg_498 <= mul_ln91_fu_212_p2;
                mul_ln98_reg_509 <= mul_ln98_fu_222_p2;
                seq1_addr_reg_504 <= zext_ln91_fu_203_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln89_reg_490(6 downto 0) <= zext_ln89_fu_188_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln90_reg_515(6 downto 0) <= zext_ln90_fu_240_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln89_reg_490(31 downto 7) <= "0000000000000000000000000";
    zext_ln90_reg_515(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_192_p2, ap_CS_fsm_state3, icmp_ln90_fu_244_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln90_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    H_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln91_4_fu_269_p1, zext_ln99_1_fu_354_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            H_address0 <= zext_ln99_1_fu_354_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            H_address0 <= zext_ln91_4_fu_269_p1(14 - 1 downto 0);
        else 
            H_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    H_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln98_1_fu_279_p1, zext_ln100_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            H_address1 <= zext_ln100_fu_393_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            H_address1 <= zext_ln98_1_fu_279_p1(14 - 1 downto 0);
        else 
            H_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    H_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            H_ce0 <= ap_const_logic_1;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            H_ce1 <= ap_const_logic_1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    H_d1 <= max_score_fu_408_p3;

    H_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            H_we1 <= ap_const_logic_1;
        else 
            H_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_fu_293_p2 <= std_logic_vector(unsigned(mul_ln98_reg_509) + unsigned(zext_ln99_fu_284_p1));
    add_ln91_1_fu_249_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(j_0_reg_156));
    add_ln91_2_fu_264_p2 <= std_logic_vector(unsigned(mul_ln91_reg_498) + unsigned(zext_ln91_3_fu_260_p1));
    add_ln91_fu_197_p2 <= std_logic_vector(unsigned(i_0_reg_144) + unsigned(ap_const_lv7_7F));
    add_ln92_1_fu_342_p2 <= std_logic_vector(unsigned(trunc_ln92_fu_332_p1) + unsigned(select_ln92_1_fu_324_p3));
    add_ln98_fu_274_p2 <= std_logic_vector(unsigned(mul_ln98_reg_509) + unsigned(zext_ln91_3_fu_260_p1));
    add_ln99_fu_288_p2 <= std_logic_vector(unsigned(mul_ln91_reg_498) + unsigned(zext_ln99_fu_284_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_192_p2)
    begin
        if ((((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln89_fu_192_p2)
    begin
        if (((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= pos_0_0_fu_62;
    ap_return_1 <= pos_1_0_fu_58;
    diag_score_2_fu_336_p2 <= std_logic_vector(unsigned(select_ln92_fu_316_p3) + unsigned(H_q0));
    down_score_fu_397_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(H_q0));
    i_fu_304_p2 <= std_logic_vector(unsigned(i_0_reg_144) + unsigned(ap_const_lv7_1));
    icmp_ln102_fu_416_p2 <= "1" when (signed(max_score_0_fu_54) > signed(max_score_fu_408_p3)) else "0";
    icmp_ln51_fu_358_p2 <= "1" when (signed(diag_score_2_fu_336_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln54_fu_376_p2 <= "1" when (signed(zext_ln51_fu_372_p1) < signed(right_score_fu_348_p2)) else "0";
    icmp_ln57_fu_403_p2 <= "1" when (signed(max_1_reg_563) < signed(down_score_fu_397_p2)) else "0";
    icmp_ln89_fu_192_p2 <= "1" when (unsigned(i_0_reg_144) > unsigned(n)) else "0";
    icmp_ln90_fu_244_p2 <= "1" when (unsigned(j_0_reg_156) > unsigned(m)) else "0";
    icmp_ln92_fu_310_p2 <= "1" when (seq1_q0 = seq2_q0) else "0";
    j_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(j_0_reg_156));
    max_1_fu_382_p3 <= 
        right_score_fu_348_p2 when (icmp_ln54_fu_376_p2(0) = '1') else 
        zext_ln51_fu_372_p1;
    max_score_fu_408_p3 <= 
        down_score_fu_397_p2 when (icmp_ln57_fu_403_p2(0) = '1') else 
        max_1_reg_563;
    mul_ln91_fu_212_p0 <= mul_ln91_fu_212_p00(7 - 1 downto 0);
    mul_ln91_fu_212_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_197_p2),14));
    mul_ln91_fu_212_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln91_fu_212_p0) * unsigned(ap_const_lv14_65), 14));
    mul_ln98_fu_222_p0 <= mul_ln98_fu_222_p00(7 - 1 downto 0);
    mul_ln98_fu_222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_144),14));
    mul_ln98_fu_222_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln98_fu_222_p0) * unsigned(ap_const_lv14_65), 14));
    right_score_fu_348_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(H_q1));
    select_ln102_1_fu_429_p3 <= 
        pos_1_0_fu_58 when (icmp_ln102_fu_416_p2(0) = '1') else 
        zext_ln90_reg_515;
    select_ln102_2_fu_436_p3 <= 
        max_score_0_fu_54 when (icmp_ln102_fu_416_p2(0) = '1') else 
        max_score_fu_408_p3;
    select_ln102_fu_422_p3 <= 
        pos_0_0_fu_62 when (icmp_ln102_fu_416_p2(0) = '1') else 
        zext_ln89_reg_490;
    select_ln51_fu_364_p3 <= 
        add_ln92_1_fu_342_p2 when (icmp_ln51_fu_358_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln92_1_fu_324_p3 <= 
        ap_const_lv31_3 when (icmp_ln92_fu_310_p2(0) = '1') else 
        ap_const_lv31_7FFFFFFD;
    select_ln92_fu_316_p3 <= 
        ap_const_lv32_3 when (icmp_ln92_fu_310_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFD;
    seq1_address0 <= seq1_addr_reg_504;

    seq1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seq1_ce0 <= ap_const_logic_1;
        else 
            seq1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    seq2_address0 <= zext_ln91_1_fu_255_p1(7 - 1 downto 0);

    seq2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seq2_ce0 <= ap_const_logic_1;
        else 
            seq2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln92_fu_332_p1 <= H_q0(31 - 1 downto 0);
    zext_ln100_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_reg_543),64));
    zext_ln51_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_364_p3),32));
    zext_ln89_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_144),32));
    zext_ln90_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_156),32));
    zext_ln91_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_1_fu_249_p2),64));
    zext_ln91_3_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_1_fu_249_p2),14));
    zext_ln91_4_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_2_fu_264_p2),64));
    zext_ln91_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_197_p2),64));
    zext_ln98_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_274_p2),64));
    zext_ln99_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_reg_538),64));
    zext_ln99_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_156),14));
end behav;
